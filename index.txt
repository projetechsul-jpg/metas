<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Painel de Metas Projetech</title>
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            background-color: #1a1a2e;
            color: #ffffff;
            min-height: 100vh;
        }
        .gauge {
            --progress: 0;
            position: relative;
            width: 150px;
            height: 150px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            background-image: conic-gradient(
                #4CAF50 var(--progress),
                #33334e var(--progress)
            );
            transition: background-image 0.5s ease-in-out;
        }
        .gauge::before {
            content: '';
            position: absolute;
            width: 120px;
            height: 120px;
            background-color: #1a1a2e;
            border-radius: 50%;
        }
        .gauge-value {
            position: relative;
            font-size: 2rem;
            font-weight: bold;
        }
        .gauge-label {
            position: absolute;
            bottom: 10px;
            font-size: 0.8rem;
            color: #888;
        }
        .fade-in {
            animation: fadeIn 1s ease-in-out forwards;
        }
        @keyframes fadeIn {
            from {
                opacity: 0;
            }
            to {
                opacity: 1;
            }
        }
        .chart-container {
            position: relative;
            height: 400px;
            width: 100%;
        }
        :fullscreen #fullscreen-btn,
        :-webkit-full-screen #fullscreen-btn,
        :-moz-full-screen #fullscreen-btn {
            display: none;
        }
        #fullscreen-btn {
            position: fixed;
            bottom: 8rem;
            right: 2rem;
            background-color: #10B981;
            color: white;
            padding: 1rem;
            border-radius: 9999px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transition: background-color 0.3s;
            z-index: 50;
        }
        .user-id-display {
            position: absolute;
            top: 1rem;
            left: 1rem;
            background-color: #33334e;
            padding: 0.5rem 1rem;
            border-radius: 9999px;
            font-size: 0.8rem;
            color: #fff;
            z-index: 50;
        }
    </style>
</head>
<body class="p-8">

    <!-- Exibição do ID de Sincronização -->
    <div class="user-id-display" id="user-id-display">
        ID de Sincronização: <span id="user-id-text">Carregando...</span>
    </div>

    <!-- Formulário de Entrada de Dados (Oculto por padrão) -->
    <div id="data-entry-form-container" class="fixed inset-0 bg-gray-900 bg-opacity-90 flex items-center justify-center z-40 hidden">
        <div class="bg-gray-800 p-8 rounded-2xl shadow-lg w-full max-w-lg relative">
            <h2 class="text-2xl font-bold mb-6 text-center">Inserir Dados e Metas</h2>
            <form id="data-entry-form" class="space-y-4">
                <div>
                    <label for="month" class="block text-sm font-medium">Mês (MM):</label>
                    <input type="text" id="month" name="month" placeholder="ex: 09" required pattern="^(0[1-9]|1[0-2])$" title="Por favor, insira o mês no formato MM (ex: 09)" class="mt-1 block w-full rounded-md bg-gray-700 border-gray-600 text-white p-2">
                </div>
                <div>
                    <label for="year" class="block text-sm font-medium">Ano (AAAA):</label>
                    <input type="text" id="year" name="year" placeholder="ex: 2024" required pattern="^\d{4}$" title="Por favor, insira o ano no formato AAAA (ex: 2024)" class="mt-1 block w-full rounded-md bg-gray-700 border-gray-600 text-white p-2">
                </div>
                <div>
                    <label for="faturamento" class="block text-sm font-medium">Faturamento (R$):</label>
                    <input type="number" id="faturamento" name="faturamento" placeholder="ex: 150000" required min="0" class="mt-1 block w-full rounded-md bg-gray-700 border-gray-600 text-white p-2">
                </div>
                <div>
                    <label for="pecas-mortas" class="block text-sm font-medium">Peças Mortas:</label>
                    <input type="number" id="pecas-mortas" name="pecas-mortas" placeholder="ex: 125" required min="0" class="mt-1 block w-full rounded-md bg-gray-700 border-gray-600 text-white p-2">
                </div>
                <div>
                    <label for="meta-mensal" class="block text-sm font-medium">Meta de Faturamento Mensal (R$):</label>
                    <input type="number" id="meta-mensal" name="meta-mensal" placeholder="ex: 200000" required min="0" class="mt-1 block w-full rounded-md bg-gray-700 border-gray-600 text-white p-2">
                </div>
                <div>
                    <label for="meta-trimestral" class="block text-sm font-medium">Meta de Faturamento Trimestral (R$):</label>
                    <input type="number" id="meta-trimestral" name="meta-trimestral" placeholder="ex: 600000" required min="0" class="mt-1 block w-full rounded-md bg-gray-700 border-gray-600 text-white p-2">
                </div>
                <div>
                    <label for="meta-anual" class="block text-sm font-medium">Meta de Faturamento Anual (R$):</label>
                    <input type="number" id="meta-anual" name="meta-anual" placeholder="ex: 2400000" required min="0" class="mt-1 block w-full rounded-md bg-gray-700 border-gray-600 text-white p-2">
                </div>
                <button type="submit" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg transition duration-300">Salvar Dados</button>
            </form>
            <button id="close-form-btn" class="absolute top-4 right-4 text-gray-400 hover:text-white">&times;</button>
        </div>
    </div>

    <!-- Interface Principal (Dashboard) -->
    <div id="dashboard-container" class="flex flex-col items-center opacity-0 overflow-y-auto">
        <!-- Logo, Título e Data/Hora -->
        <img src="https://placehold.co/250x60/1a1a2e/ffffff?text=Projetech" alt="Logotipo da Projetech" class="w-64 md:w-80 lg:w-96 mb-4">
        <h1 class="text-2xl sm:text-3xl md:text-4xl font-extrabold text-center mb-4">Painel de Metas Projetech - Juntos Pela Excelência</h1>
        <p id="current-datetime" class="text-lg text-gray-400 mb-8 text-center"></p>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-8 w-full max-w-7xl">
            <!-- Card de Metas de Faturamento -->
            <div class="bg-gray-800 p-8 rounded-2xl shadow-2xl">
                <h2 class="text-3xl font-bold mb-6 text-center">Metas de Faturamento</h2>
                <div class="grid grid-cols-1 sm:grid-cols-3 gap-4 justify-items-center">
                    <!-- Meta Mensal -->
                    <div class="flex flex-col items-center">
                        <div id="gauge-monthly" class="gauge" style="--progress: 0%;">
                            <span id="monthly-progress-text" class="gauge-value">0%</span>
                        </div>
                        <span id="monthly-label" class="mt-4 text-center text-sm font-bold"></span>
                    </div>
                    <!-- Meta Trimestral -->
                    <div class="flex flex-col items-center">
                        <div id="gauge-quarterly" class="gauge" style="--progress: 0%;">
                            <span id="quarterly-progress-text" class="gauge-value">0%</span>
                        </div>
                        <span id="quarterly-label" class="mt-4 text-center text-sm font-bold"></span>
                    </div>
                    <!-- Meta Anual -->
                    <div class="flex flex-col items-center">
                        <div id="gauge-annual" class="gauge" style="--progress: 0%;">
                            <span id="annual-progress-text" class="gauge-value">0%</span>
                        </div>
                        <span id="annual-label" class="mt-4 text-center text-sm font-bold"></span>
                    </div>
                </div>
            </div>

            <!-- Card de Peças Mortas -->
            <div class="bg-gray-800 p-8 rounded-2xl shadow-2xl flex flex-col items-center">
                <h2 class="text-3xl font-bold mb-6 text-center">Peças Mortas</h2>
                <div class="flex flex-col items-center text-center">
                    <p class="text-xl">Peças Mortas neste mês:</p>
                    <p id="current-scrap" class="text-6xl sm:text-7xl font-bold my-4">0</p>
                </div>
                
                <div id="comparison-section" class="mt-6">
                    <p class="text-lg text-gray-300">Comparação com o mês anterior:</p>
                    <div id="comparison-display" class="flex items-center mt-2 space-x-2">
                        <!-- Conteúdo dinâmico de comparação (ícone e texto) -->
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Gráficos de Faturamento e Peças Mortas -->
        <div class="mt-12 w-full max-w-7xl grid grid-cols-1 lg:grid-cols-2 gap-8">
            <div class="bg-gray-800 p-8 rounded-2xl shadow-2xl">
                <h2 class="text-3xl font-bold mb-6 text-center">Evolução do Faturamento</h2>
                <div class="chart-container">
                    <canvas id="faturamentoChart"></canvas>
                </div>
            </div>
            <div class="bg-gray-800 p-8 rounded-2xl shadow-2xl">
                <h2 class="text-3xl font-bold mb-6 text-center">Peças Mortas ao Longo do Tempo</h2>
                <div class="chart-container">
                    <canvas id="scrapChart"></canvas>
                </div>
            </div>
        </div>

        <!-- Tabela de Histórico de Dados -->
        <div id="history-section" class="mt-12 w-full max-w-7xl bg-gray-800 p-8 rounded-2xl shadow-2xl">
            <h2 class="text-3xl font-bold mb-6 text-center">Histórico de Dados</h2>
            <div class="overflow-x-auto">
                <table id="history-table" class="min-w-full divide-y divide-gray-700">
                    <thead>
                        <tr>
                            <th class="px-4 py-2 text-left text-sm font-bold text-gray-400">Mês/Ano</th>
                            <th class="px-4 py-2 text-left text-sm font-bold text-gray-400">Progresso (%)</th>
                            <th class="px-4 py-2 text-left text-sm font-bold text-gray-400">Peças Mortas</th>
                            <th class="px-4 py-2 text-left text-sm font-bold text-gray-400">Ações</th>
                        </tr>
                    </thead>
                    <tbody class="divide-y divide-gray-700" id="history-table-body">
                        <!-- Linhas de dados serão inseridas aqui via JavaScript -->
                    </tbody>
                </table>
            </div>
        </div>
        
        <!-- Seção de Mensagem (para feedback e erros) -->
        <div id="message-container" class="mt-8 p-4 rounded-xl text-center hidden"></div>
    </div>

    <!-- Botão Flutuante para Abrir o Formulário -->
    <button id="open-form-btn" class="fixed bottom-8 right-8 bg-purple-600 hover:bg-purple-700 text-white font-bold py-4 px-4 rounded-full transition duration-300 shadow-lg">
        ⚙️
    </button>
    
    <!-- Botão para Modo de Tela Cheia -->
    <button id="fullscreen-btn" class="fixed bottom-8 right-8 bg-green-500 hover:bg-green-600 text-white font-bold py-4 px-4 rounded-full transition duration-300 shadow-lg">
        📺
    </button>
    
    <!-- Scripts do Firebase -->
    <script type="module">
        // Importações do Firebase SDK
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, doc, onSnapshot, setDoc, serverTimestamp, deleteDoc } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
        import { collection, addDoc, getDocs, query, where } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";


        // Variáveis do DOM
        const dashboardContainer = document.getElementById('dashboard-container');
        const dataEntryFormContainer = document.getElementById('data-entry-form-container');
        const dataEntryForm = document.getElementById('data-entry-form');
        const openFormBtn = document.getElementById('open-form-btn');
        const fullscreenBtn = document.getElementById('fullscreen-btn');
        const closeFormBtn = document.getElementById('close-form-btn');
        const monthlyProgressText = document.getElementById('monthly-progress-text');
        const quarterlyProgressText = document.getElementById('quarterly-progress-text');
        const annualProgressText = document.getElementById('annual-progress-text');
        const currentScrap = document.getElementById('current-scrap');
        const comparisonDisplay = document.getElementById('comparison-display');
        const messageContainer = document.getElementById('message-container');
        const currentDatetimeElement = document.getElementById('current-datetime');
        const historyTableBody = document.getElementById('history-table-body');
        const monthlyLabel = document.getElementById('monthly-label');
        const quarterlyLabel = document.getElementById('quarterly-label');
        const annualLabel = document.getElementById('annual-label');
        const userIdText = document.getElementById('user-id-text');

        // Referências dos gráficos e dados
        let faturamentoChart;
        let scrapChart;
        let dataCollectionRef;
        const months = ["Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"];
        
        // --- Configuração do Firebase ---
        let app, db, auth, userId;

        const initializeFirebase = async () => {
            try {
                // Estas variáveis são injetadas pelo ambiente. Não as altere.
                const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
                const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};

                app = initializeApp(firebaseConfig);
                db = getFirestore(app);
                auth = getAuth(app);
                
                onAuthStateChanged(auth, async (user) => {
                    if (user) {
                        userId = user.uid;
                        userIdText.textContent = userId.substring(0, 8); // Mostra apenas parte do ID
                        // O caminho da coleção no Firestore para armazenar os dados do painel.
                        // Usamos um caminho público para que qualquer pessoa com o link possa ver e editar.
                        dataCollectionRef = collection(db, 'artifacts', appId, 'public', 'data', 'entries');
                        setupRealtimeListener();
                    }
                });

                if (typeof __initial_auth_token !== 'undefined' && __initial_auth_token) {
                    await signInWithCustomToken(auth, __initial_auth_token);
                } else {
                    await signInAnonymously(auth);
                }

            } catch (error) {
                console.error("Erro ao inicializar o Firebase:", error);
                showMessage("Não foi possível conectar ao serviço de dados em tempo real.", "error");
            }
        };

        const setupRealtimeListener = () => {
            if (!dataCollectionRef) return;
            // onSnapshot escuta por mudanças na coleção em tempo real
            onSnapshot(dataCollectionRef, (querySnapshot) => {
                const data = [];
                querySnapshot.forEach((doc) => {
                    data.push({ firestoreId: doc.id, ...doc.data() });
                });
                updateDashboard(data);
            }, (error) => {
                console.error("Erro ao escutar por atualizações:", error);
                showMessage("Erro de conexão com o banco de dados.", "error");
            });
        };
        // --- Fim da Configuração do Firebase ---

        const showMessage = (message, type = 'info') => {
            messageContainer.textContent = message;
            messageContainer.className = `mt-8 p-4 rounded-xl text-center`;
            if (type === 'success') {
                messageContainer.classList.add('bg-green-600', 'text-white');
            } else if (type === 'error') {
                messageContainer.classList.add('bg-red-600', 'text-white');
            } else {
                messageContainer.classList.add('bg-blue-600', 'text-white');
            }
            messageContainer.classList.remove('hidden');
            setTimeout(() => {
                messageContainer.classList.add('hidden');
            }, 5000);
        };

        const updateGauge = (gaugeId, value) => {
            const gauge = document.getElementById(gaugeId);
            if (gauge) {
                const progress = Math.min(100, Math.max(0, parseFloat(value)));
                gauge.style.setProperty('--progress', `${progress}%`);
                if (progress >= 100) {
                    gauge.style.backgroundImage = 'conic-gradient(#059669 var(--progress), #33334e var(--progress))';
                } else if (progress >= 75) {
                     gauge.style.backgroundImage = 'conic-gradient(#4CAF50 var(--progress), #33334e var(--progress))';
                } else if (progress >= 50) {
                    gauge.style.backgroundImage = 'conic-gradient(#ffc107 var(--progress), #33334e var(--progress))';
                } else {
                     gauge.style.backgroundImage = 'conic-gradient(#ef4444 var(--progress), #33334e var(--progress))';
                }
            }
        };
        
        const renderGauges = (data, currentMonthData) => {
            const now = new Date();
            const currentYear = currentMonthData ? parseInt(currentMonthData.year, 10) : now.getFullYear();
            const currentMonth = currentMonthData ? parseInt(currentMonthData.month, 10) : now.getMonth() + 1;
            const currentQuarter = Math.floor((currentMonth - 1) / 3) + 1;
            
            const currentYearData = data.filter(item => parseInt(item.year, 10) === currentYear);
            const currentQuarterData = data.filter(item => {
                const itemYear = parseInt(item.year, 10);
                const itemMonth = parseInt(item.month, 10);
                const itemQuarter = Math.floor((itemMonth - 1) / 3) + 1;
                return itemYear === currentYear && itemQuarter === currentQuarter;
            });
            
            const currentQuarterTotalFaturamento = currentQuarterData.reduce((sum, item) => sum + parseFloat(item.faturamento), 0);
            
            let quarterlyTarget = 0;
            const latestQuarterData = currentQuarterData.sort((a, b) => new Date(`${b.year}-${b.month}-01`) - new Date(`${a.year}-${a.month}-01`))[0];
            if (latestQuarterData && latestQuarterData.metaTrimestral) {
                quarterlyTarget = parseFloat(latestQuarterData.metaTrimestral);
            }
            
            const quarterlyPercent = quarterlyTarget > 0 ? ((currentQuarterTotalFaturamento / quarterlyTarget) * 100).toFixed(2) : 0;
            
            let monthlyPercent = 0;
            let annualPercent = 0;
            
            if (currentMonthData) {
                const monthlyTarget = parseFloat(currentMonthData.metaMensal);
                const currentFaturamento = parseFloat(currentMonthData.faturamento);
                monthlyPercent = monthlyTarget > 0 ? ((currentFaturamento / monthlyTarget) * 100).toFixed(2) : 0;
                
                const annualTarget = parseFloat(currentMonthData.metaAnual);
                const annualFaturamento = currentYearData.reduce((sum, item) => sum + parseFloat(item.faturamento), 0);
                annualPercent = annualTarget > 0 ? ((annualFaturamento / annualTarget) * 100).toFixed(2) : 0;
            }
            
            monthlyProgressText.textContent = `${monthlyPercent}%`;
            quarterlyProgressText.textContent = `${quarterlyPercent}%`;
            annualProgressText.textContent = `${annualPercent}%`;

            updateGauge('gauge-monthly', monthlyPercent);
            updateGauge('gauge-quarterly', quarterlyPercent);
            updateGauge('gauge-annual', annualPercent);
        };
        
        const renderScrapData = (currentMonthData, previousMonthData) => {
            const currentScrapCount = currentMonthData ? parseInt(currentMonthData.pecasMortas, 10) : 0;
            currentScrap.textContent = currentScrapCount;

            currentScrap.classList.remove('text-red-500', 'text-green-500');
            if (previousMonthData && currentScrapCount > parseInt(previousMonthData.pecasMortas, 10)) {
                currentScrap.classList.add('text-red-500'); 
            } else {
                currentScrap.classList.add('text-green-500'); 
            }
            
            comparisonDisplay.innerHTML = '';
            
            if (previousMonthData) {
                const previousScrapCount = parseInt(previousMonthData.pecasMortas, 10);
                const diff = previousScrapCount - currentScrapCount;
                let percentChange = 0;
                let icon = '';
                let colorClass = 'text-green-500';
                let message = '';

                if (previousScrapCount === 0) {
                    if (currentScrapCount > 0) {
                        percentChange = 100;
                        icon = '↑';
                        colorClass = 'text-red-500';
                        message = 'maior que o mês anterior';
                    } else {
                        percentChange = 0;
                        icon = '—';
                        colorClass = 'text-gray-400';
                        message = 'Sem mudança';
                    }
                } else {
                    percentChange = (Math.abs(diff) / previousScrapCount * 100).toFixed(2);
                    if (diff > 0) {
                        icon = '↓';
                        colorClass = 'text-green-500';
                        message = `menor que o mês anterior`;
                    } else if (diff < 0) {
                        icon = '↑';
                        colorClass = 'text-red-500';
                        message = `maior que o mês anterior`;
                    } else {
                        icon = '—';
                        colorClass = 'text-gray-400';
                        message = 'Sem mudança';
                    }
                }
                
                comparisonDisplay.innerHTML = `
                    <span class="text-3xl font-bold ${colorClass}">${icon} ${percentChange}%</span>
                    <span class="text-sm text-gray-400">${message}</span>
                `;
            } else {
                 comparisonDisplay.innerHTML = `<span class="text-xl text-gray-400">Dados insuficientes para comparação</span>`;
            }
        };

        const renderHistoricalData = (data) => {
            historyTableBody.innerHTML = '';
            if (data.length === 0) {
                historyTableBody.innerHTML = `<tr><td colspan="4" class="px-4 py-2 text-center text-gray-400">Nenhum dado histórico encontrado.</td></tr>`;
                return;
            }

            data.forEach(item => {
                const faturamento = parseFloat(item.faturamento);
                const metaMensal = parseFloat(item.metaMensal);
                const progress = metaMensal > 0 ? (faturamento / metaMensal * 100).toFixed(2) : 0;
                
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td class="px-4 py-2 text-sm">${item.month}/${item.year}</td>
                    <td class="px-4 py-2 text-sm">${progress}%</td>
                    <td class="px-4 py-2 text-sm">${item.pecasMortas}</td>
                    <td class="px-4 py-2 text-sm">
                        <button class="text-red-500 hover:text-red-700 font-bold" data-id="${item.firestoreId}">Excluir</button>
                    </td>
                `;
                historyTableBody.appendChild(row);
            });
            // Adiciona event listeners aos novos botões de exclusão
            historyTableBody.querySelectorAll('button[data-id]').forEach(button => {
                button.addEventListener('click', () => deleteData(button.dataset.id));
            });
        };
        
        const deleteData = (firestoreId) => {
            const modal = document.createElement('div');
            modal.className = 'fixed inset-0 bg-gray-900 bg-opacity-75 flex items-center justify-center z-50';
            modal.innerHTML = `
                <div class="bg-gray-800 p-8 rounded-2xl shadow-lg text-center w-full max-w-sm">
                    <h3 class="text-2xl font-bold text-yellow-500 mb-4">Confirmar Exclusão</h3>
                    <p class="text-gray-300">Tem certeza que deseja excluir este registro?</p>
                    <div class="mt-6 flex justify-center space-x-4">
                        <button id="confirm-delete" class="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-lg transition duration-300">Excluir</button>
                        <button id="cancel-delete" class="bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded-lg transition duration-300">Cancelar</button>
                    </div>
                </div>
            `;
            document.body.appendChild(modal);

            document.getElementById('confirm-delete').onclick = async () => {
                document.body.removeChild(modal);
                try {
                    await deleteDoc(doc(dataCollectionRef, firestoreId));
                    showMessage("Registro excluído com sucesso!", 'success');
                } catch (error) {
                    console.error("Erro ao excluir registro:", error);
                    showMessage("Falha ao excluir o registro.", 'error');
                }
            };
            document.getElementById('cancel-delete').onclick = () => {
                document.body.removeChild(modal);
            };
        };

        const renderCharts = (data) => {
            const sortedData = [...data].sort((a, b) => {
                const dateA = new Date(`${a.year}-${a.month}-01`);
                const dateB = new Date(`${b.year}-${b.month}-01`);
                return dateA - dateB;
            });
            
            const labels = sortedData.map(d => `${d.month}/${d.year}`);
            const faturamentoValues = sortedData.map(d => {
                const meta = parseFloat(d.metaMensal);
                return meta > 0 ? (d.faturamento / meta) * 100 : 0;
            });
            const scrapValues = sortedData.map(d => parseInt(d.pecasMortas, 10));

            const faturamentoCtx = document.getElementById('faturamentoChart').getContext('2d');
            const scrapCtx = document.getElementById('scrapChart').getContext('2d');

            if (faturamentoChart) faturamentoChart.destroy();
            if (scrapChart) scrapChart.destroy();

            faturamentoChart = new Chart(faturamentoCtx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Faturamento Mensal (%)',
                        data: faturamentoValues,
                        backgroundColor: 'rgba(54, 162, 235, 0.6)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: { y: { beginAtZero: true, ticks: { callback: value => value.toFixed(0) + '%' } } }
                }
            });

            scrapChart = new Chart(scrapCtx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Peças Mortas',
                        data: scrapValues,
                        backgroundColor: 'rgba(255, 99, 132, 0.6)',
                        borderColor: 'rgba(255, 99, 132, 1)',
                        borderWidth: 1,
                        tension: 0.3
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: { y: { beginAtZero: true } }
                }
            });
        };

        const updateDashboard = (data) => {
            const sortedData = [...data].sort((a, b) => {
                const dateA = new Date(`${a.year}-${a.month}-01`);
                const dateB = new Date(`${b.year}-${b.month}-01`);
                return dateB - dateA; // Classifica do mais recente para o mais antigo
            });
            
            const currentMonthData = sortedData.length > 0 ? sortedData[0] : null;
            const previousMonthData = sortedData.length > 1 ? sortedData[1] : null;
            
            renderGauges(data, currentMonthData);
            renderScrapData(currentMonthData, previousMonthData);
            renderHistoricalData(sortedData.reverse()); // Reverte para a tabela exibir do mais antigo ao mais novo
            renderCharts(data);

            if (currentMonthData) {
                const currentMonthIndex = parseInt(currentMonthData.month, 10) - 1;
                const currentYear = currentMonthData.year;
                const quarter = Math.floor(currentMonthIndex / 3) + 1;
                
                monthlyLabel.textContent = `${months[currentMonthIndex]} de ${currentYear}`;
                quarterlyLabel.textContent = `${quarter}º Trimestre de ${currentYear}`;
                annualLabel.textContent = `${currentYear}`;
            } else {
                monthlyLabel.textContent = 'N/A';
                quarterlyLabel.textContent = 'N/A';
                annualLabel.textContent = 'N/A';
            }
            
            dashboardContainer.classList.remove('opacity-0');
            dashboardContainer.classList.add('fade-in');
        };

        const updateDateTime = () => {
            const now = new Date();
            const options = {
                weekday: 'long', year: 'numeric', month: 'long', day: 'numeric',
                hour: '2-digit', minute: '2-digit', second: '2-digit'
            };
            currentDatetimeElement.textContent = now.toLocaleDateString('pt-BR', options);
        };
        
        dataEntryForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const formData = new FormData(dataEntryForm);
            const month = formData.get('month');
            const year = formData.get('year');
            const docId = `${year}-${month}`;

            const dataToSave = {
                id: docId,
                month: month,
                year: year,
                faturamento: parseFloat(formData.get('faturamento')),
                pecasMortas: parseInt(formData.get('pecas-mortas'), 10),
                metaMensal: parseFloat(formData.get('meta-mensal')),
                metaTrimestral: parseFloat(formData.get('meta-trimestral')),
                metaAnual: parseFloat(formData.get('meta-anual')),
                createdAt: serverTimestamp()
            };

            try {
                // Verifica se já existe um registro para o mesmo mês/ano
                const q = query(dataCollectionRef, where("id", "==", docId));
                const querySnapshot = await getDocs(q);

                if (!querySnapshot.empty) {
                    // Atualiza o documento existente
                    const existingDoc = querySnapshot.docs[0];
                    await setDoc(doc(dataCollectionRef, existingDoc.id), dataToSave);
                    showMessage("Dados atualizados com sucesso na nuvem!", 'success');
                } else {
                    // Adiciona um novo documento
                    await addDoc(dataCollectionRef, dataToSave);
                    showMessage("Dados salvos com sucesso na nuvem!", 'success');
                }
                
                dataEntryFormContainer.classList.add('hidden');
                dataEntryForm.reset();

            } catch (error) {
                console.error("Erro ao salvar dados: ", error);
                showMessage("Erro ao salvar os dados. Verifique sua conexão.", 'error');
            }
        });


        openFormBtn.addEventListener('click', () => dataEntryFormContainer.classList.remove('hidden'));
        closeFormBtn.addEventListener('click', () => dataEntryFormContainer.classList.add('hidden'));

        fullscreenBtn.addEventListener('click', () => {
            if (document.documentElement.requestFullscreen) {
                document.documentElement.requestFullscreen();
            } else if (document.documentElement.webkitRequestFullscreen) { /* Safari */
                document.documentElement.webkitRequestFullscreen();
            } else if (document.documentElement.msRequestFullscreen) { /* IE11 */
                document.documentElement.msRequestFullscreen();
            }
        });

        // Inicialização
        initializeFirebase();
        setInterval(updateDateTime, 1000);
    </script>
</body>
</html>

